{"version":3,"sources":["assets/img/banner-img.png","assets/img/demo.png","assets/img/banner-completed.png","components/Timer/Timer.jsx","components/FormInput/FormInput.jsx","pages/Layout.jsx","store/reducers.js","store/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Timer","props","state","seconds","showResult","resultMinutes","resultSeconds","minutes","hours","interval","handleResult","bind","timer","pad","goHome","console","log","timerValue","time","rhours","rminutes","chours","crhours","cminutes","this","Math","floor","round","setState","currentTime","localStorage","getItem","isNaN","split","setInterval","setItem","window","location","pathname","clearInterval","removeItem","setImage","d","toString","e","JSON","parse","sec","parseInt","className","onClick","to","Component","connect","dispatch","value","type","FormInput","validator","validatorMessge","redirectTimer","setCurrentVal","startTimer","target","length","setTimerValue","validatorMessage","maxLength","placeholder","name","id","required","onChange","htmlFor","Layout","href","src","logo","alt","bannerImg","exact","path","render","from","bannerImageFinal","initialState","demoVal","rootReducer","action","store","createStore","App","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.105ad6a8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/banner-img.293a4c7b.png\";","module.exports = __webpack_public_path__ + \"static/media/demo.8fe5331d.png\";","module.exports = __webpack_public_path__ + \"static/media/banner-completed.95a5ac28.png\";","import React, { Component } from \"react\";\r\nimport { NavLink, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst CLOCKUNIT = 59;\r\n\r\nclass Timer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      seconds: null,\r\n      showResult: false,\r\n      resultMinutes: '',\r\n      resultSeconds: '',\r\n      minutes: null,\r\n      hours: null,\r\n      interval: null,\r\n    };\r\n\r\n    this.handleResult = this.handleResult.bind(this);\r\n    this.timer = this.timer.bind(this);\r\n    this.pad = this.pad.bind(this);\r\n    this.goHome = this.goHome.bind(this);\r\n\r\n    console.log(this.props.timerValue);\r\n    \r\n  }\r\n\r\n  componentDidMount() {\r\n    // Time calculation\r\n    let time, hours, rhours, minutes, rminutes, chours, crhours, cminutes, crminutes;\r\n    time = this.props.timerValue;\r\n    if (time > 0) {\r\n      hours = time / 60;\r\n      rhours = Math.floor(hours) <= 0 ? 0 : Math.floor(hours) - 1;\r\n      minutes = (hours - rhours) * 60;\r\n      rminutes = Math.round(minutes) <= 0 ? 0 : Math.round(minutes) - 1;\r\n\r\n      // Condition to get exceeded minutes\r\n      if(rminutes > 59){\r\n        chours = rminutes / 60;\r\n        crhours = Math.floor(chours);\r\n        cminutes = (chours - crhours) * 60;\r\n        crminutes = Math.round(cminutes);\r\n\r\n        rhours = rhours + crhours;\r\n        rminutes = crminutes;\r\n      }\r\n\r\n      // Time values intialization\r\n      this.setState({\r\n        hours: this.pad(rhours),\r\n        minutes: this.pad(rminutes),\r\n        seconds: this.pad(CLOCKUNIT),\r\n      });\r\n    }\r\n\r\n    // Get time from local storage if available\r\n    let currentTime = localStorage.getItem(\"currentTime\");\r\n    if (currentTime) {\r\n      this.setState({\r\n        hours: isNaN(currentTime.split(\" \")[0])\r\n          ? \"00\"\r\n          : currentTime.split(\" \")[0],\r\n        minutes: isNaN(currentTime.split(\" \")[1])\r\n          ? \"00\"\r\n          : currentTime.split(\" \")[1],\r\n        seconds: currentTime.split(\" \")[2],\r\n      });\r\n    }\r\n\r\n    let interval = setInterval(() => {\r\n      //Reducing seconds\r\n      this.setState(({ seconds }) => ({\r\n        seconds: this.pad(seconds - 1),\r\n      }));\r\n\r\n      // Conditions to change hours & minutes in timer() functi\r\n      this.timer();\r\n\r\n      // Set current timer value in local storage\r\n      localStorage.setItem(\r\n        \"currentTime\",\r\n        this.state.hours + \" \" + this.state.minutes + \" \" + this.state.seconds\r\n      );\r\n\r\n      // Condition to clear timer in other pages\r\n      if (window.location.pathname === \"/\") {\r\n        clearInterval(interval);\r\n      }\r\n    }, 1000);\r\n    this.setState({ interval: interval });\r\n  }\r\n\r\n  goHome(){\r\n    localStorage.removeItem('currentTime');\r\n    this.props.setImage({\r\n      setImage: false\r\n    });\r\n  }\r\n\r\n  timer() {\r\n    if (this.state.seconds == \"00\") {\r\n      if (this.state.minutes > 0) {\r\n        this.setState({\r\n          minutes: this.pad(this.state.minutes - 1),\r\n          seconds: this.pad(CLOCKUNIT),\r\n        });\r\n      } else {\r\n        if (\r\n          this.state.hours === \"00\" &&\r\n          this.state.minutes === \"00\" &&\r\n          this.state.seconds === \"00\"\r\n        ) {\r\n          clearInterval(this.state.interval);\r\n          this.handleResult();\r\n        } else {\r\n          this.setState({\r\n            hours: this.pad(this.state.hours - 1),\r\n            minutes: this.pad(CLOCKUNIT),\r\n            seconds: this.pad(CLOCKUNIT),\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  pad(d) {\r\n    return d < 10 ? \"0\" + d.toString() : d.toString();\r\n  }\r\n\r\n  handleResult(e) {\r\n    // Stops timer\r\n    clearInterval(this.state.interval);\r\n\r\n    // API time calc\r\n    const APITime = this.props.timerValue;\r\n    let hours, rhours, minutes, rminutes, resultMinutes, resultSeconds;\r\n    hours = APITime / 60;\r\n    rhours = Math.floor(hours) <= 0 ? 0 : Math.floor(hours);\r\n    minutes = (hours - rhours) * 60;\r\n    rminutes = Math.round(minutes) <= 0 ? 0 : Math.round(minutes);\r\n\r\n    // rminutes = rhours >= 1 ? 60 : rminutes;\r\n    rminutes = rminutes === 0 ? 60 : rminutes;\r\n\r\n    // POST API call of all questions\r\n    let localObj = JSON.parse(localStorage.getItem(\"questions\"));\r\n    if (this.state.hours && this.state.minutes) {\r\n      const sec = this.state.seconds === \"00\" ? 0 : 60 - this.state.seconds;\r\n      const time_taken =\r\n        parseInt(this.state.hours) * 60 +\r\n        parseInt(this.state.minutes) +\r\n        \".\" +\r\n        sec;\r\n        \r\n      if (time_taken === \"0.0\") {\r\n        // timer = rhours + rminutes + \".0\";\r\n        resultMinutes = rhours + rminutes;\r\n        resultSeconds = 0;\r\n\r\n      } else {\r\n        // Calculated current time with API time\r\n        // timer = this.pad(rminutes - (parseInt(this.state.minutes) + 1)) + \".\" + this.pad(sec);\r\n        resultMinutes = this.pad(rminutes - (parseInt(this.state.minutes) + 1));\r\n        resultSeconds = this.pad(sec)\r\n      }\r\n      // alert(`Timer running time: `+timer)\r\n      this.setState({\r\n        showResult: true,\r\n        resultMinutes: resultMinutes,\r\n        resultSeconds: resultSeconds\r\n      })\r\n    }\r\n\r\n    // Image change\r\n    this.props.setImage({\r\n      setImage: true\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { hours, minutes, seconds, showResult, resultMinutes, resultSeconds } = this.state;\r\n\r\n    let publishButton;\r\n\r\n    return (\r\n      <div className=\"nav-wrapper\">\r\n          {!showResult &&\r\n          <div className=\"navbar__timer\">\r\n            <span>{hours + \":\" + minutes + \":\" + seconds}</span>\r\n            <button className=\"start-timer\" onClick={this.handleResult}>STOP TIMER</button>\r\n          </div>\r\n          }\r\n\r\n          {showResult &&\r\n          <div className=\"timer-result\">\r\n            <h4>Your Time Summary</h4>\r\n            <div className=\"timer-result__detail\">\r\n              <span><b>{resultMinutes}</b> Minutes</span>\r\n              <span><b>{resultSeconds}</b> Seconds</span>\r\n            </div>\r\n            {/* <button className=\"start-timer\">HOME</button> */}\r\n            <NavLink onClick={this.goHome} to={'/sathish-timer'} className=\"start-timer\">\r\n                RESET TIMER\r\n            </NavLink>\r\n          </div>\r\n          }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    timerValue: state.timerValue,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n      setImage: (value) => dispatch({ type: \"SET_IMAGE\", value }),\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer);\r\n","import React, { Component } from \"react\";\r\nimport { NavLink, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass FormInput extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n        timerValue: '',\r\n        validator: false,\r\n        validatorMessge: '',\r\n        redirectTimer: false\r\n    };\r\n\r\n    this.setCurrentVal = this.setCurrentVal.bind(this);\r\n    this.startTimer = this.startTimer.bind(this);\r\n\r\n    console.log(this.props.timerValue);\r\n  }\r\n\r\n  setCurrentVal(e){\r\n    // Validator condition on change\r\n    if(e.target.value!='' && this.state.validator){\r\n      this.setState({validator: false})\r\n    }\r\n    // Input element limit\r\n    if(e.target.value.length <= 6){\r\n      this.setState({\r\n        timerValue: e.target.value\r\n      })\r\n    }\r\n  }\r\n\r\n  startTimer(){\r\n    // Validator condition on start TImer\r\n    if(this.state.timerValue != ''){\r\n      this.props.setTimerValue({timerValue: this.state.timerValue});\r\n      this.setState({redirectTimer: true})\r\n    }else{\r\n      this.setState({\r\n        validator: true,\r\n        validatorMessage: '*Timer value required'\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { validatorMessage, validator, timerValue, redirectTimer } = this.state;\r\n\r\n    if(redirectTimer){\r\n      return <Redirect to={\"/sathish-timer/timer\"} />\r\n    }\r\n\r\n    return (\r\n        <div className=\"timer-content__input\">\r\n            <div className=\"form__group field\">\r\n                <input type=\"number\" maxLength=\"6\" className=\"form__field\" placeholder=\"Name\" name=\"name\" id='name' required onChange={(e) => this.setCurrentVal(e)} value={timerValue}/>\r\n                <label htmlFor=\"name\" className=\"form__label\">Enter some minutes</label>\r\n            </div>\r\n            {validator && <span className=\"error-msg\">{validatorMessage}</span>}\r\n            <button className=\"start-timer\" onClick={this.startTimer}>START TIMER</button>\r\n            {/* <NavLink onClick={this.startTimer} to={`/timer`} className=\"start-timer\">\r\n                START TIMER\r\n            </NavLink> */}\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        timerValue: state.timerValue,\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setTimerValue: (value) => dispatch({ type: \"SET_TIMER_VALUE\", value }),\r\n    };\r\n}\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormInput);","import React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport Timer from \"../components/Timer/Timer\";\r\nimport FormInput from \"../components/FormInput/FormInput\";\r\nimport bannerImg from \"../assets/img/banner-img.png\";\r\nimport logo from \"../assets/img/demo.png\"\r\nimport { connect } from \"react-redux\";\r\nimport bannerImgFinal from \"../assets/img/banner-completed.png\";\r\nimport { BrowserRouter, Switch, Route, Redirect } from \"react-router-dom\";\r\n\r\nclass Layout extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    console.log(this.props.timerValue);\r\n  }\r\n\r\n  render() {\r\n    const {  } = this.state;\r\n    // let bannerImage = !this.props.bannerImageFinal ? bannerImg : bannerImgFinal;\r\n    return (\r\n      <div className=\"timer fadein\">\r\n        <a href=\"https://github.com/Sathishvasi/sathish-timer-dev\" className=\"corner-ribbon\" target=\"_blank\">Github</a>\r\n        <div className=\"timer-header\">\r\n          <img src={logo} alt=\"Logo img\"/>\r\n          <h5>SATHISH TIMER</h5>\r\n        </div>\r\n        <div className=\"timer-card\">\r\n          <div className=\"timer-banner\">\r\n            <img src={bannerImg} className=\"fadein\" alt=\"Banner\"/> \r\n            {/* {!this.props.bannerImageFinal ? <img src={bannerImg} className=\"fadein\" alt=\"Banner\"/> : <img src={bannerImgFinal} className=\"fadein\" alt=\"Banner\"/>} */}\r\n          </div>\r\n          <div className=\"timer-content\">\r\n            <BrowserRouter>\r\n              <Switch>\r\n                <Route\r\n                  name=\"Layout\"\r\n                  exact\r\n                  path=\"/sathish-timer\"\r\n                  render={(props) => <FormInput {...props} />}\r\n                />\r\n                <Route\r\n                  name=\"Timer Page\"\r\n                  path=\"/sathish-timer/timer\"\r\n                  render={(props) => <Timer {...props} />}\r\n                />\r\n              </Switch>\r\n                <Redirect exact from=\"/\" to=\"/sathish-timer\"></Redirect>\r\n            </BrowserRouter>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    timerValue: state.timerValue,\r\n    bannerImageFinal: state.bannerImageFinal\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    setTimerValue: (value) => dispatch({ type: \"SET_TIMER_VALUE\", value }),\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Layout);\r\n","const initialState = {\r\n  demoVal: 'sathish',\r\n  timerValue: '',\r\n  bannerImageFinal: false\r\n};\r\n\r\nfunction rootReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case 'SET_TIMER_VALUE':\r\n      return {\r\n        ...state,\r\n        timerValue: action.value.timerValue,\r\n      }\r\n    case 'SET_IMAGE':\r\n      return {\r\n        ...state,\r\n        bannerImageFinal: action.value.setImage,\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default rootReducer;\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport \"assets/sass/styles.scss\";\r\nimport Layout from \"pages/Layout\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"store/index\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <Layout></Layout>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker === null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType !== null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}